
stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000026d4  00002768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006e  0080006e  00002776  2**0
                  ALLOC
  3 .stab         00001854  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c76  00000000  00000000  00003fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008077  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000917c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000943e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_1>
       8:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_2>
       c:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 0a 	call	0x147c	; 0x147c <main>
      8a:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <GPIO_setupPinDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_setupPinDirection+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	88 30       	cpi	r24, 0x08	; 8
     cb6:	08 f0       	brcs	.+2      	; 0xcba <GPIO_setupPinDirection+0x1c>
     cb8:	d5 c0       	rjmp	.+426    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <GPIO_setupPinDirection+0x24>
     cc0:	d1 c0       	rjmp	.+418    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3d 83       	std	Y+5, r19	; 0x05
     cca:	2c 83       	std	Y+4, r18	; 0x04
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	91 05       	cpc	r25, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <GPIO_setupPinDirection+0x3a>
     cd6:	43 c0       	rjmp	.+134    	; 0xd5e <GPIO_setupPinDirection+0xc0>
     cd8:	2c 81       	ldd	r18, Y+4	; 0x04
     cda:	3d 81       	ldd	r19, Y+5	; 0x05
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	2c f4       	brge	.+10     	; 0xcec <GPIO_setupPinDirection+0x4e>
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	71 f0       	breq	.+28     	; 0xd06 <GPIO_setupPinDirection+0x68>
     cea:	bc c0       	rjmp	.+376    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
     cec:	2c 81       	ldd	r18, Y+4	; 0x04
     cee:	3d 81       	ldd	r19, Y+5	; 0x05
     cf0:	22 30       	cpi	r18, 0x02	; 2
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <GPIO_setupPinDirection+0x5a>
     cf6:	5f c0       	rjmp	.+190    	; 0xdb6 <GPIO_setupPinDirection+0x118>
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <GPIO_setupPinDirection+0x66>
     d02:	85 c0       	rjmp	.+266    	; 0xe0e <GPIO_setupPinDirection+0x170>
     d04:	af c0       	rjmp	.+350    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	a1 f4       	brne	.+40     	; 0xd34 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d0c:	aa e3       	ldi	r26, 0x3A	; 58
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ea e3       	ldi	r30, 0x3A	; 58
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <GPIO_setupPinDirection+0x8c>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <GPIO_setupPinDirection+0x88>
     d2e:	84 2b       	or	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	98 c0       	rjmp	.+304    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d34:	aa e3       	ldi	r26, 0x3A	; 58
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ea e3       	ldi	r30, 0x3A	; 58
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <GPIO_setupPinDirection+0xb4>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <GPIO_setupPinDirection+0xb0>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	83 c0       	rjmp	.+262    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	a1 f4       	brne	.+40     	; 0xd8c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d64:	a7 e3       	ldi	r26, 0x37	; 55
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e3       	ldi	r30, 0x37	; 55
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <GPIO_setupPinDirection+0xe4>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <GPIO_setupPinDirection+0xe0>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	6c c0       	rjmp	.+216    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d8c:	a7 e3       	ldi	r26, 0x37	; 55
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e3       	ldi	r30, 0x37	; 55
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <GPIO_setupPinDirection+0x10c>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <GPIO_setupPinDirection+0x108>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	57 c0       	rjmp	.+174    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	a1 f4       	brne	.+40     	; 0xde4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     dbc:	a4 e3       	ldi	r26, 0x34	; 52
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <GPIO_setupPinDirection+0x13c>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <GPIO_setupPinDirection+0x138>
     dde:	84 2b       	or	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     de4:	a4 e3       	ldi	r26, 0x34	; 52
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e4 e3       	ldi	r30, 0x34	; 52
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <GPIO_setupPinDirection+0x164>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <GPIO_setupPinDirection+0x160>
     e06:	80 95       	com	r24
     e08:	84 23       	and	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	2b c0       	rjmp	.+86     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	a1 f4       	brne	.+40     	; 0xe3c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e14:	a1 e3       	ldi	r26, 0x31	; 49
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e1 e3       	ldi	r30, 0x31	; 49
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <GPIO_setupPinDirection+0x194>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <GPIO_setupPinDirection+0x190>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e3c:	a1 e3       	ldi	r26, 0x31	; 49
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e1 e3       	ldi	r30, 0x31	; 49
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <GPIO_setupPinDirection+0x1bc>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <GPIO_setupPinDirection+0x1b8>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <GPIO_writePin+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <GPIO_writePin+0x8>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	6a 83       	std	Y+2, r22	; 0x02
     e86:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	88 30       	cpi	r24, 0x08	; 8
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <GPIO_writePin+0x1c>
     e8e:	d5 c0       	rjmp	.+426    	; 0x103a <GPIO_writePin+0x1c6>
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	08 f0       	brcs	.+2      	; 0xe98 <GPIO_writePin+0x24>
     e96:	d1 c0       	rjmp	.+418    	; 0x103a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	3d 83       	std	Y+5, r19	; 0x05
     ea0:	2c 83       	std	Y+4, r18	; 0x04
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <GPIO_writePin+0x3a>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <GPIO_writePin+0xc0>
     eae:	2c 81       	ldd	r18, Y+4	; 0x04
     eb0:	3d 81       	ldd	r19, Y+5	; 0x05
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <GPIO_writePin+0x4e>
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	9d 81       	ldd	r25, Y+5	; 0x05
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	71 f0       	breq	.+28     	; 0xedc <GPIO_writePin+0x68>
     ec0:	bc c0       	rjmp	.+376    	; 0x103a <GPIO_writePin+0x1c6>
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	09 f4       	brne	.+2      	; 0xece <GPIO_writePin+0x5a>
     ecc:	5f c0       	rjmp	.+190    	; 0xf8c <GPIO_writePin+0x118>
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	91 05       	cpc	r25, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <GPIO_writePin+0x66>
     ed8:	85 c0       	rjmp	.+266    	; 0xfe4 <GPIO_writePin+0x170>
     eda:	af c0       	rjmp	.+350    	; 0x103a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	a1 f4       	brne	.+40     	; 0xf0a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ee2:	ab e3       	ldi	r26, 0x3B	; 59
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	eb e3       	ldi	r30, 0x3B	; 59
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <GPIO_writePin+0x8c>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <GPIO_writePin+0x88>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	98 c0       	rjmp	.+304    	; 0x103a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f0a:	ab e3       	ldi	r26, 0x3B	; 59
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e3       	ldi	r30, 0x3B	; 59
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <GPIO_writePin+0xb4>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <GPIO_writePin+0xb0>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	83 c0       	rjmp	.+262    	; 0x103a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	a1 f4       	brne	.+40     	; 0xf62 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f3a:	a8 e3       	ldi	r26, 0x38	; 56
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e8 e3       	ldi	r30, 0x38	; 56
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <GPIO_writePin+0xe4>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <GPIO_writePin+0xe0>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	6c c0       	rjmp	.+216    	; 0x103a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f62:	a8 e3       	ldi	r26, 0x38	; 56
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 e3       	ldi	r30, 0x38	; 56
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <GPIO_writePin+0x10c>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <GPIO_writePin+0x108>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	57 c0       	rjmp	.+174    	; 0x103a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	a1 f4       	brne	.+40     	; 0xfba <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f92:	a5 e3       	ldi	r26, 0x35	; 53
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e3       	ldi	r30, 0x35	; 53
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <GPIO_writePin+0x13c>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <GPIO_writePin+0x138>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	40 c0       	rjmp	.+128    	; 0x103a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     fba:	a5 e3       	ldi	r26, 0x35	; 53
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e5 e3       	ldi	r30, 0x35	; 53
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <GPIO_writePin+0x164>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <GPIO_writePin+0x160>
     fdc:	80 95       	com	r24
     fde:	84 23       	and	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	2b c0       	rjmp	.+86     	; 0x103a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	a1 f4       	brne	.+40     	; 0x1012 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fea:	a2 e3       	ldi	r26, 0x32	; 50
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e2 e3       	ldi	r30, 0x32	; 50
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <GPIO_writePin+0x194>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <GPIO_writePin+0x190>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	14 c0       	rjmp	.+40     	; 0x103a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1012:	a2 e3       	ldi	r26, 0x32	; 50
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <GPIO_writePin+0x1bc>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <GPIO_writePin+0x1b8>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <GPIO_readPin+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <GPIO_readPin+0x8>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    105c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	08 f0       	brcs	.+2      	; 0x1066 <GPIO_readPin+0x1c>
    1064:	84 c0       	rjmp	.+264    	; 0x116e <GPIO_readPin+0x124>
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	08 f0       	brcs	.+2      	; 0x106e <GPIO_readPin+0x24>
    106c:	80 c0       	rjmp	.+256    	; 0x116e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	3d 83       	std	Y+5, r19	; 0x05
    1076:	2c 83       	std	Y+4, r18	; 0x04
    1078:	4c 81       	ldd	r20, Y+4	; 0x04
    107a:	5d 81       	ldd	r21, Y+5	; 0x05
    107c:	41 30       	cpi	r20, 0x01	; 1
    107e:	51 05       	cpc	r21, r1
    1080:	79 f1       	breq	.+94     	; 0x10e0 <GPIO_readPin+0x96>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	34 f4       	brge	.+12     	; 0x1098 <GPIO_readPin+0x4e>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	21 15       	cp	r18, r1
    1092:	31 05       	cpc	r19, r1
    1094:	69 f0       	breq	.+26     	; 0x10b0 <GPIO_readPin+0x66>
    1096:	6b c0       	rjmp	.+214    	; 0x116e <GPIO_readPin+0x124>
    1098:	4c 81       	ldd	r20, Y+4	; 0x04
    109a:	5d 81       	ldd	r21, Y+5	; 0x05
    109c:	42 30       	cpi	r20, 0x02	; 2
    109e:	51 05       	cpc	r21, r1
    10a0:	b9 f1       	breq	.+110    	; 0x1110 <GPIO_readPin+0xc6>
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <GPIO_readPin+0x64>
    10ac:	49 c0       	rjmp	.+146    	; 0x1140 <GPIO_readPin+0xf6>
    10ae:	5f c0       	rjmp	.+190    	; 0x116e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    10b0:	e9 e3       	ldi	r30, 0x39	; 57
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a9 01       	movw	r20, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <GPIO_readPin+0x7e>
    10c4:	55 95       	asr	r21
    10c6:	47 95       	ror	r20
    10c8:	8a 95       	dec	r24
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <GPIO_readPin+0x7a>
    10cc:	ca 01       	movw	r24, r20
    10ce:	81 70       	andi	r24, 0x01	; 1
    10d0:	90 70       	andi	r25, 0x00	; 0
    10d2:	88 23       	and	r24, r24
    10d4:	19 f0       	breq	.+6      	; 0x10dc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	49 c0       	rjmp	.+146    	; 0x116e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10dc:	19 82       	std	Y+1, r1	; 0x01
    10de:	47 c0       	rjmp	.+142    	; 0x116e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    10e0:	e6 e3       	ldi	r30, 0x36	; 54
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a9 01       	movw	r20, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <GPIO_readPin+0xae>
    10f4:	55 95       	asr	r21
    10f6:	47 95       	ror	r20
    10f8:	8a 95       	dec	r24
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <GPIO_readPin+0xaa>
    10fc:	ca 01       	movw	r24, r20
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	90 70       	andi	r25, 0x00	; 0
    1102:	88 23       	and	r24, r24
    1104:	19 f0       	breq	.+6      	; 0x110c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	31 c0       	rjmp	.+98     	; 0x116e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    110c:	19 82       	std	Y+1, r1	; 0x01
    110e:	2f c0       	rjmp	.+94     	; 0x116e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1110:	e3 e3       	ldi	r30, 0x33	; 51
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a9 01       	movw	r20, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <GPIO_readPin+0xde>
    1124:	55 95       	asr	r21
    1126:	47 95       	ror	r20
    1128:	8a 95       	dec	r24
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <GPIO_readPin+0xda>
    112c:	ca 01       	movw	r24, r20
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	88 23       	and	r24, r24
    1134:	19 f0       	breq	.+6      	; 0x113c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	19 c0       	rjmp	.+50     	; 0x116e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    113c:	19 82       	std	Y+1, r1	; 0x01
    113e:	17 c0       	rjmp	.+46     	; 0x116e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1140:	e0 e3       	ldi	r30, 0x30	; 48
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_readPin+0x10e>
    1154:	55 95       	asr	r21
    1156:	47 95       	ror	r20
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_readPin+0x10a>
    115c:	ca 01       	movw	r24, r20
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	88 23       	and	r24, r24
    1164:	19 f0       	breq	.+6      	; 0x116c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	01 c0       	rjmp	.+2      	; 0x116e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    116c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    116e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <GPIO_setupPortDirection+0x6>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <GPIO_setupPortDirection+0x8>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	90 f5       	brcc	.+100    	; 0x11fa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3c 83       	std	Y+4, r19	; 0x04
    119e:	2b 83       	std	Y+3, r18	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	d1 f0       	breq	.+52     	; 0x11de <GPIO_setupPortDirection+0x5e>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	2c f4       	brge	.+10     	; 0x11be <GPIO_setupPortDirection+0x3e>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <GPIO_setupPortDirection+0x54>
    11bc:	1e c0       	rjmp	.+60     	; 0x11fa <GPIO_setupPortDirection+0x7a>
    11be:	2b 81       	ldd	r18, Y+3	; 0x03
    11c0:	3c 81       	ldd	r19, Y+4	; 0x04
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <GPIO_setupPortDirection+0x68>
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <GPIO_setupPortDirection+0x72>
    11d2:	13 c0       	rjmp	.+38     	; 0x11fa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    11d4:	ea e3       	ldi	r30, 0x3A	; 58
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	80 83       	st	Z, r24
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    11de:	e7 e3       	ldi	r30, 0x37	; 55
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	80 83       	st	Z, r24
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11f2:	e1 e3       	ldi	r30, 0x31	; 49
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	80 83       	st	Z, r24
			break;
		}
	}
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	00 d0       	rcall	.+0      	; 0x120e <GPIO_writePort+0x6>
    120e:	00 d0       	rcall	.+0      	; 0x1210 <GPIO_writePort+0x8>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	90 f5       	brcc	.+100    	; 0x1282 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	3c 83       	std	Y+4, r19	; 0x04
    1226:	2b 83       	std	Y+3, r18	; 0x03
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	91 05       	cpc	r25, r1
    1230:	d1 f0       	breq	.+52     	; 0x1266 <GPIO_writePort+0x5e>
    1232:	2b 81       	ldd	r18, Y+3	; 0x03
    1234:	3c 81       	ldd	r19, Y+4	; 0x04
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	2c f4       	brge	.+10     	; 0x1246 <GPIO_writePort+0x3e>
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	61 f0       	breq	.+24     	; 0x125c <GPIO_writePort+0x54>
    1244:	1e c0       	rjmp	.+60     	; 0x1282 <GPIO_writePort+0x7a>
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	81 f0       	breq	.+32     	; 0x1270 <GPIO_writePort+0x68>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	83 30       	cpi	r24, 0x03	; 3
    1256:	91 05       	cpc	r25, r1
    1258:	81 f0       	breq	.+32     	; 0x127a <GPIO_writePort+0x72>
    125a:	13 c0       	rjmp	.+38     	; 0x1282 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    125c:	eb e3       	ldi	r30, 0x3B	; 59
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	80 83       	st	Z, r24
    1264:	0e c0       	rjmp	.+28     	; 0x1282 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1266:	e8 e3       	ldi	r30, 0x38	; 56
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	80 83       	st	Z, r24
    126e:	09 c0       	rjmp	.+18     	; 0x1282 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1270:	e5 e3       	ldi	r30, 0x35	; 53
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    127a:	e2 e3       	ldi	r30, 0x32	; 50
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	80 83       	st	Z, r24
			break;
		}
	}
}
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	00 d0       	rcall	.+0      	; 0x1296 <GPIO_readPort+0x6>
    1296:	00 d0       	rcall	.+0      	; 0x1298 <GPIO_readPort+0x8>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    129e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	90 f5       	brcc	.+100    	; 0x130a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	3c 83       	std	Y+4, r19	; 0x04
    12ae:	2b 83       	std	Y+3, r18	; 0x03
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	91 05       	cpc	r25, r1
    12b8:	d1 f0       	breq	.+52     	; 0x12ee <GPIO_readPort+0x5e>
    12ba:	2b 81       	ldd	r18, Y+3	; 0x03
    12bc:	3c 81       	ldd	r19, Y+4	; 0x04
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	2c f4       	brge	.+10     	; 0x12ce <GPIO_readPort+0x3e>
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <GPIO_readPort+0x54>
    12cc:	1e c0       	rjmp	.+60     	; 0x130a <GPIO_readPort+0x7a>
    12ce:	2b 81       	ldd	r18, Y+3	; 0x03
    12d0:	3c 81       	ldd	r19, Y+4	; 0x04
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	81 f0       	breq	.+32     	; 0x12f8 <GPIO_readPort+0x68>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	81 f0       	breq	.+32     	; 0x1302 <GPIO_readPort+0x72>
    12e2:	13 c0       	rjmp	.+38     	; 0x130a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    12e4:	e9 e3       	ldi	r30, 0x39	; 57
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	0e c0       	rjmp	.+28     	; 0x130a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    12ee:	e6 e3       	ldi	r30, 0x36	; 54
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12f8:	e3 e3       	ldi	r30, 0x33	; 51
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	04 c0       	rjmp	.+8      	; 0x130a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1302:	e0 e3       	ldi	r30, 0x30	; 48
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    130a:	89 81       	ldd	r24, Y+1	; 0x01
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <__vector_1>:
//	TCNT1 = 0;
//	OCR1A = 15625;
//	TIMSK |= (1 << OCIE1A);
//}

ISR(INT0_vect) {
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	8f 93       	push	r24
    1326:	ef 93       	push	r30
    1328:	ff 93       	push	r31
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
	sec1 = 0, sec2 = 0, mins1 = 0, mins2 = 0, hours1 = 0, hours2 = 0;
    1332:	10 92 6f 00 	sts	0x006F, r1
    1336:	10 92 6e 00 	sts	0x006E, r1
    133a:	10 92 71 00 	sts	0x0071, r1
    133e:	10 92 70 00 	sts	0x0070, r1
    1342:	10 92 73 00 	sts	0x0073, r1
    1346:	10 92 72 00 	sts	0x0072, r1
    134a:	10 92 75 00 	sts	0x0075, r1
    134e:	10 92 74 00 	sts	0x0074, r1
    1352:	10 92 77 00 	sts	0x0077, r1
    1356:	10 92 76 00 	sts	0x0076, r1
    135a:	10 92 79 00 	sts	0x0079, r1
    135e:	10 92 78 00 	sts	0x0078, r1
	TCNT1 = 0;
    1362:	ec e4       	ldi	r30, 0x4C	; 76
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	11 82       	std	Z+1, r1	; 0x01
    1368:	10 82       	st	Z, r1
	TCCR1A = (1<<FOC1A);
    136a:	ef e4       	ldi	r30, 0x4F	; 79
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	88 e0       	ldi	r24, 0x08	; 8
    1370:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12) | (1<<CS11) | (1<<CS10);
    1372:	ee e4       	ldi	r30, 0x4E	; 78
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	8b e0       	ldi	r24, 0x0B	; 11
    1378:	80 83       	st	Z, r24
}
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	ff 91       	pop	r31
    1380:	ef 91       	pop	r30
    1382:	8f 91       	pop	r24
    1384:	0f 90       	pop	r0
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	0f 90       	pop	r0
    138a:	1f 90       	pop	r1
    138c:	18 95       	reti

0000138e <INT0_Init>:
void INT0_Init(void) {
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1 << ISC01);
    1396:	a5 e5       	ldi	r26, 0x55	; 85
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e5 e5       	ldi	r30, 0x55	; 85
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	82 60       	ori	r24, 0x02	; 2
    13a2:	8c 93       	st	X, r24
	GICR  |= (1<<INT0);
    13a4:	ab e5       	ldi	r26, 0x5B	; 91
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	eb e5       	ldi	r30, 0x5B	; 91
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 64       	ori	r24, 0x40	; 64
    13b0:	8c 93       	st	X, r24
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <__vector_2>:
ISR(INT1_vect) {
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    13ce:	ef e4       	ldi	r30, 0x4F	; 79
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	10 82       	st	Z, r1
	TCCR1B = 0;
    13d4:	ee e4       	ldi	r30, 0x4E	; 78
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	10 82       	st	Z, r1
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	ff 91       	pop	r31
    13e0:	ef 91       	pop	r30
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	0f 90       	pop	r0
    13e8:	1f 90       	pop	r1
    13ea:	18 95       	reti

000013ec <INT1_Init>:
void INT1_Init(void) {
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1<<ISC11) | (1<<ISC10);
    13f4:	a5 e5       	ldi	r26, 0x55	; 85
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e5 e5       	ldi	r30, 0x55	; 85
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	8c 60       	ori	r24, 0x0C	; 12
    1400:	8c 93       	st	X, r24
	GICR  |= (1<<INT1);
    1402:	ab e5       	ldi	r26, 0x5B	; 91
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	eb e5       	ldi	r30, 0x5B	; 91
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	80 68       	ori	r24, 0x80	; 128
    140e:	8c 93       	st	X, r24
}
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <__vector_3>:
ISR(INT2_vect) {
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	8f 93       	push	r24
    1422:	ef 93       	push	r30
    1424:	ff 93       	push	r31
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = (1<<FOC1A);
    142e:	ef e4       	ldi	r30, 0x4F	; 79
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	88 e0       	ldi	r24, 0x08	; 8
    1434:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12) | (1<<CS11) | (1<<CS10);
    1436:	ee e4       	ldi	r30, 0x4E	; 78
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	8b e0       	ldi	r24, 0x0B	; 11
    143c:	80 83       	st	Z, r24
}
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	ff 91       	pop	r31
    1444:	ef 91       	pop	r30
    1446:	8f 91       	pop	r24
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <INT2_Init>:
void INT2_Init(void) {
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	MCUCSR &= ~(1<<ISC2);
    145a:	a4 e5       	ldi	r26, 0x54	; 84
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e4 e5       	ldi	r30, 0x54	; 84
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8f 7b       	andi	r24, 0xBF	; 191
    1466:	8c 93       	st	X, r24
	GICR  |= (1<<INT2);
    1468:	ab e5       	ldi	r26, 0x5B	; 91
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	eb e5       	ldi	r30, 0x5B	; 91
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 62       	ori	r24, 0x20	; 32
    1474:	8c 93       	st	X, r24
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <main>:




int main()
{
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	cb 59       	subi	r28, 0x9B	; 155
    148a:	d0 40       	sbci	r29, 0x00	; 0
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
    1496:	af e5       	ldi	r26, 0x5F	; 95
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	ef e5       	ldi	r30, 0x5F	; 95
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	80 68       	ori	r24, 0x80	; 128
    14a2:	8c 93       	st	X, r24
	Timer1_ConfigType Tconfig={0,15625,PRESCALER_64,CTC};
    14a4:	ce 01       	movw	r24, r28
    14a6:	8f 56       	subi	r24, 0x6F	; 111
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	c9 56       	subi	r28, 0x69	; 105
    14ac:	df 4f       	sbci	r29, 0xFF	; 255
    14ae:	99 83       	std	Y+1, r25	; 0x01
    14b0:	88 83       	st	Y, r24
    14b2:	c7 59       	subi	r28, 0x97	; 151
    14b4:	d0 40       	sbci	r29, 0x00	; 0
    14b6:	88 e6       	ldi	r24, 0x68	; 104
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	c7 56       	subi	r28, 0x67	; 103
    14bc:	df 4f       	sbci	r29, 0xFF	; 255
    14be:	99 83       	std	Y+1, r25	; 0x01
    14c0:	88 83       	st	Y, r24
    14c2:	c9 59       	subi	r28, 0x99	; 153
    14c4:	d0 40       	sbci	r29, 0x00	; 0
    14c6:	96 e0       	ldi	r25, 0x06	; 6
    14c8:	c5 56       	subi	r28, 0x65	; 101
    14ca:	df 4f       	sbci	r29, 0xFF	; 255
    14cc:	98 83       	st	Y, r25
    14ce:	cb 59       	subi	r28, 0x9B	; 155
    14d0:	d0 40       	sbci	r29, 0x00	; 0
    14d2:	c7 56       	subi	r28, 0x67	; 103
    14d4:	df 4f       	sbci	r29, 0xFF	; 255
    14d6:	e8 81       	ld	r30, Y
    14d8:	f9 81       	ldd	r31, Y+1	; 0x01
    14da:	c9 59       	subi	r28, 0x99	; 153
    14dc:	d0 40       	sbci	r29, 0x00	; 0
    14de:	00 80       	ld	r0, Z
    14e0:	c7 56       	subi	r28, 0x67	; 103
    14e2:	df 4f       	sbci	r29, 0xFF	; 255
    14e4:	88 81       	ld	r24, Y
    14e6:	99 81       	ldd	r25, Y+1	; 0x01
    14e8:	c9 59       	subi	r28, 0x99	; 153
    14ea:	d0 40       	sbci	r29, 0x00	; 0
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	c7 56       	subi	r28, 0x67	; 103
    14f0:	df 4f       	sbci	r29, 0xFF	; 255
    14f2:	99 83       	std	Y+1, r25	; 0x01
    14f4:	88 83       	st	Y, r24
    14f6:	c9 59       	subi	r28, 0x99	; 153
    14f8:	d0 40       	sbci	r29, 0x00	; 0
    14fa:	c9 56       	subi	r28, 0x69	; 105
    14fc:	df 4f       	sbci	r29, 0xFF	; 255
    14fe:	e8 81       	ld	r30, Y
    1500:	f9 81       	ldd	r31, Y+1	; 0x01
    1502:	c7 59       	subi	r28, 0x97	; 151
    1504:	d0 40       	sbci	r29, 0x00	; 0
    1506:	00 82       	st	Z, r0
    1508:	c9 56       	subi	r28, 0x69	; 105
    150a:	df 4f       	sbci	r29, 0xFF	; 255
    150c:	88 81       	ld	r24, Y
    150e:	99 81       	ldd	r25, Y+1	; 0x01
    1510:	c7 59       	subi	r28, 0x97	; 151
    1512:	d0 40       	sbci	r29, 0x00	; 0
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	c9 56       	subi	r28, 0x69	; 105
    1518:	df 4f       	sbci	r29, 0xFF	; 255
    151a:	99 83       	std	Y+1, r25	; 0x01
    151c:	88 83       	st	Y, r24
    151e:	c7 59       	subi	r28, 0x97	; 151
    1520:	d0 40       	sbci	r29, 0x00	; 0
    1522:	c5 56       	subi	r28, 0x65	; 101
    1524:	df 4f       	sbci	r29, 0xFF	; 255
    1526:	98 81       	ld	r25, Y
    1528:	cb 59       	subi	r28, 0x9B	; 155
    152a:	d0 40       	sbci	r29, 0x00	; 0
    152c:	91 50       	subi	r25, 0x01	; 1
    152e:	c5 56       	subi	r28, 0x65	; 101
    1530:	df 4f       	sbci	r29, 0xFF	; 255
    1532:	98 83       	st	Y, r25
    1534:	cb 59       	subi	r28, 0x9B	; 155
    1536:	d0 40       	sbci	r29, 0x00	; 0
    1538:	c5 56       	subi	r28, 0x65	; 101
    153a:	df 4f       	sbci	r29, 0xFF	; 255
    153c:	e8 81       	ld	r30, Y
    153e:	cb 59       	subi	r28, 0x9B	; 155
    1540:	d0 40       	sbci	r29, 0x00	; 0
    1542:	ee 23       	and	r30, r30
    1544:	31 f6       	brne	.-116    	; 0x14d2 <main+0x56>
	Timer1_init(&Tconfig);
    1546:	ce 01       	movw	r24, r28
    1548:	8f 56       	subi	r24, 0x6F	; 111
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	0e 94 bf 12 	call	0x257e	; 0x257e <Timer1_init>
	INT0_Init();
    1550:	0e 94 c7 09 	call	0x138e	; 0x138e <INT0_Init>
	INT1_Init();
    1554:	0e 94 f6 09 	call	0x13ec	; 0x13ec <INT1_Init>
	INT2_Init();
    1558:	0e 94 29 0a 	call	0x1452	; 0x1452 <INT2_Init>

	DDRB &= ~(1<<PB2);
    155c:	a7 e3       	ldi	r26, 0x37	; 55
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e7 e3       	ldi	r30, 0x37	; 55
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	8b 7f       	andi	r24, 0xFB	; 251
    1568:	8c 93       	st	X, r24
	DDRD &= ~(1<<PD2) | ~(1<<PD3);
    156a:	a1 e3       	ldi	r26, 0x31	; 49
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e1 e3       	ldi	r30, 0x31	; 49
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	8c 93       	st	X, r24
	PORTB |= (1<<PB2);
    1576:	a8 e3       	ldi	r26, 0x38	; 56
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e8 e3       	ldi	r30, 0x38	; 56
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	84 60       	ori	r24, 0x04	; 4
    1582:	8c 93       	st	X, r24
	PORTD |= (1<<PD2);
    1584:	a2 e3       	ldi	r26, 0x32	; 50
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e2 e3       	ldi	r30, 0x32	; 50
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	84 60       	ori	r24, 0x04	; 4
    1590:	8c 93       	st	X, r24

	DDRC |= 0x0F;
    1592:	a4 e3       	ldi	r26, 0x34	; 52
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e4 e3       	ldi	r30, 0x34	; 52
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8f 60       	ori	r24, 0x0F	; 15
    159e:	8c 93       	st	X, r24
	DDRA |= 0x3F;
    15a0:	aa e3       	ldi	r26, 0x3A	; 58
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ea e3       	ldi	r30, 0x3A	; 58
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8f 63       	ori	r24, 0x3F	; 63
    15ac:	8c 93       	st	X, r24

	PORTC &= (0xF0);
    15ae:	a5 e3       	ldi	r26, 0x35	; 53
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e5 e3       	ldi	r30, 0x35	; 53
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 7f       	andi	r24, 0xF0	; 240
    15ba:	8c 93       	st	X, r24



	while(1)
	{
		PORTC = (PORTC & 0xF0) | (sec1 & 0x0F);
    15bc:	a5 e3       	ldi	r26, 0x35	; 53
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e5 e3       	ldi	r30, 0x35	; 53
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	28 2f       	mov	r18, r24
    15c8:	20 7f       	andi	r18, 0xF0	; 240
    15ca:	80 91 6e 00 	lds	r24, 0x006E
    15ce:	90 91 6f 00 	lds	r25, 0x006F
    15d2:	8f 70       	andi	r24, 0x0F	; 15
    15d4:	82 2b       	or	r24, r18
    15d6:	8c 93       	st	X, r24

		PORTA |=  (1 << PA0);
    15d8:	ab e3       	ldi	r26, 0x3B	; 59
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	eb e3       	ldi	r30, 0x3B	; 59
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	81 60       	ori	r24, 0x01	; 1
    15e4:	8c 93       	st	X, r24
    15e6:	fe 01       	movw	r30, r28
    15e8:	e3 57       	subi	r30, 0x73	; 115
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	a0 e0       	ldi	r26, 0x00	; 0
    15f2:	b0 e4       	ldi	r27, 0x40	; 64
    15f4:	80 83       	st	Z, r24
    15f6:	91 83       	std	Z+1, r25	; 0x01
    15f8:	a2 83       	std	Z+2, r26	; 0x02
    15fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15fc:	8e 01       	movw	r16, r28
    15fe:	07 57       	subi	r16, 0x77	; 119
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	fe 01       	movw	r30, r28
    1604:	e3 57       	subi	r30, 0x73	; 115
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	2b ea       	ldi	r18, 0xAB	; 171
    1612:	3a ea       	ldi	r19, 0xAA	; 170
    1614:	4a ea       	ldi	r20, 0xAA	; 170
    1616:	5e e3       	ldi	r21, 0x3E	; 62
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	f8 01       	movw	r30, r16
    1622:	80 83       	st	Z, r24
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	a2 83       	std	Z+2, r26	; 0x02
    1628:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    162a:	fe 01       	movw	r30, r28
    162c:	e7 57       	subi	r30, 0x77	; 119
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	60 81       	ld	r22, Z
    1632:	71 81       	ldd	r23, Z+1	; 0x01
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	93 81       	ldd	r25, Z+3	; 0x03
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	34 f4       	brge	.+12     	; 0x1654 <main+0x1d8>
		__ticks = 1;
    1648:	fe 01       	movw	r30, r28
    164a:	e8 57       	subi	r30, 0x78	; 120
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	80 83       	st	Z, r24
    1652:	e0 c0       	rjmp	.+448    	; 0x1814 <main+0x398>
	else if (__tmp > 255)
    1654:	fe 01       	movw	r30, r28
    1656:	e7 57       	subi	r30, 0x77	; 119
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	60 81       	ld	r22, Z
    165c:	71 81       	ldd	r23, Z+1	; 0x01
    165e:	82 81       	ldd	r24, Z+2	; 0x02
    1660:	93 81       	ldd	r25, Z+3	; 0x03
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4f e7       	ldi	r20, 0x7F	; 127
    1668:	53 e4       	ldi	r21, 0x43	; 67
    166a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    166e:	18 16       	cp	r1, r24
    1670:	0c f0       	brlt	.+2      	; 0x1674 <main+0x1f8>
    1672:	c0 c0       	rjmp	.+384    	; 0x17f4 <main+0x378>
	{
		_delay_ms(__us / 1000.0);
    1674:	fe 01       	movw	r30, r28
    1676:	e3 57       	subi	r30, 0x73	; 115
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a e7       	ldi	r20, 0x7A	; 122
    1688:	54 e4       	ldi	r21, 0x44	; 68
    168a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	fe 01       	movw	r30, r28
    1694:	ec 57       	subi	r30, 0x7C	; 124
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	80 83       	st	Z, r24
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	a2 83       	std	Z+2, r26	; 0x02
    169e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	8e 01       	movw	r16, r28
    16a2:	00 58       	subi	r16, 0x80	; 128
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	fe 01       	movw	r30, r28
    16a8:	ec 57       	subi	r30, 0x7C	; 124
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a e7       	ldi	r20, 0x7A	; 122
    16ba:	53 e4       	ldi	r21, 0x43	; 67
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	f8 01       	movw	r30, r16
    16c6:	80 83       	st	Z, r24
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	a2 83       	std	Z+2, r26	; 0x02
    16cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ce:	fe 01       	movw	r30, r28
    16d0:	e0 58       	subi	r30, 0x80	; 128
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	60 81       	ld	r22, Z
    16d6:	71 81       	ldd	r23, Z+1	; 0x01
    16d8:	82 81       	ldd	r24, Z+2	; 0x02
    16da:	93 81       	ldd	r25, Z+3	; 0x03
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	44 f4       	brge	.+16     	; 0x16fc <main+0x280>
		__ticks = 1;
    16ec:	fe 01       	movw	r30, r28
    16ee:	e2 58       	subi	r30, 0x82	; 130
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
    16fa:	64 c0       	rjmp	.+200    	; 0x17c4 <main+0x348>
	else if (__tmp > 65535)
    16fc:	fe 01       	movw	r30, r28
    16fe:	e0 58       	subi	r30, 0x80	; 128
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	0c f0       	brlt	.+2      	; 0x171c <main+0x2a0>
    171a:	43 c0       	rjmp	.+134    	; 0x17a2 <main+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171c:	fe 01       	movw	r30, r28
    171e:	ec 57       	subi	r30, 0x7C	; 124
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e2       	ldi	r20, 0x20	; 32
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8e 01       	movw	r16, r28
    173c:	02 58       	subi	r16, 0x82	; 130
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	f8 01       	movw	r30, r16
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	80 83       	st	Z, r24
    1752:	1f c0       	rjmp	.+62     	; 0x1792 <main+0x316>
    1754:	fe 01       	movw	r30, r28
    1756:	e4 58       	subi	r30, 0x84	; 132
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	89 e1       	ldi	r24, 0x19	; 25
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1762:	fe 01       	movw	r30, r28
    1764:	e4 58       	subi	r30, 0x84	; 132
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <main+0x2f0>
    1770:	fe 01       	movw	r30, r28
    1772:	e4 58       	subi	r30, 0x84	; 132
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	de 01       	movw	r26, r28
    177c:	a2 58       	subi	r26, 0x82	; 130
    177e:	bf 4f       	sbci	r27, 0xFF	; 255
    1780:	fe 01       	movw	r30, r28
    1782:	e2 58       	subi	r30, 0x82	; 130
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	11 96       	adiw	r26, 0x01	; 1
    178e:	9c 93       	st	X, r25
    1790:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1792:	fe 01       	movw	r30, r28
    1794:	e2 58       	subi	r30, 0x82	; 130
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	d1 f6       	brne	.-76     	; 0x1754 <main+0x2d8>
    17a0:	4b c0       	rjmp	.+150    	; 0x1838 <main+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a2:	8e 01       	movw	r16, r28
    17a4:	02 58       	subi	r16, 0x82	; 130
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	fe 01       	movw	r30, r28
    17aa:	e0 58       	subi	r30, 0x80	; 128
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	f8 01       	movw	r30, r16
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    17c4:	de 01       	movw	r26, r28
    17c6:	a6 58       	subi	r26, 0x86	; 134
    17c8:	bf 4f       	sbci	r27, 0xFF	; 255
    17ca:	fe 01       	movw	r30, r28
    17cc:	e2 58       	subi	r30, 0x82	; 130
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	11 96       	adiw	r26, 0x01	; 1
    17d6:	9c 93       	st	X, r25
    17d8:	8e 93       	st	-X, r24
    17da:	fe 01       	movw	r30, r28
    17dc:	e6 58       	subi	r30, 0x86	; 134
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <main+0x368>
    17e8:	fe 01       	movw	r30, r28
    17ea:	e6 58       	subi	r30, 0x86	; 134
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
    17f2:	22 c0       	rjmp	.+68     	; 0x1838 <main+0x3bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17f4:	8e 01       	movw	r16, r28
    17f6:	08 57       	subi	r16, 0x78	; 120
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	fe 01       	movw	r30, r28
    17fc:	e7 57       	subi	r30, 0x77	; 119
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	f8 01       	movw	r30, r16
    1812:	80 83       	st	Z, r24
    1814:	de 01       	movw	r26, r28
    1816:	a7 58       	subi	r26, 0x87	; 135
    1818:	bf 4f       	sbci	r27, 0xFF	; 255
    181a:	fe 01       	movw	r30, r28
    181c:	e8 57       	subi	r30, 0x78	; 120
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 81       	ld	r24, Z
    1822:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1824:	fe 01       	movw	r30, r28
    1826:	e7 58       	subi	r30, 0x87	; 135
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	80 81       	ld	r24, Z
    182c:	8a 95       	dec	r24
    182e:	f1 f7       	brne	.-4      	; 0x182c <main+0x3b0>
    1830:	fe 01       	movw	r30, r28
    1832:	e7 58       	subi	r30, 0x87	; 135
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 83       	st	Z, r24

		_delay_us(2);

		PORTA &= ~(1 << PA0);
    1838:	ab e3       	ldi	r26, 0x3B	; 59
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	eb e3       	ldi	r30, 0x3B	; 59
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8e 7f       	andi	r24, 0xFE	; 254
    1844:	8c 93       	st	X, r24

		PORTC = (PORTC & 0xF0) | (sec2 & 0x0F);
    1846:	a5 e3       	ldi	r26, 0x35	; 53
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e5 e3       	ldi	r30, 0x35	; 53
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	28 2f       	mov	r18, r24
    1852:	20 7f       	andi	r18, 0xF0	; 240
    1854:	80 91 70 00 	lds	r24, 0x0070
    1858:	90 91 71 00 	lds	r25, 0x0071
    185c:	8f 70       	andi	r24, 0x0F	; 15
    185e:	82 2b       	or	r24, r18
    1860:	8c 93       	st	X, r24

		PORTA |=  (1 << PA1);
    1862:	ab e3       	ldi	r26, 0x3B	; 59
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	eb e3       	ldi	r30, 0x3B	; 59
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	82 60       	ori	r24, 0x02	; 2
    186e:	8c 93       	st	X, r24
    1870:	fe 01       	movw	r30, r28
    1872:	eb 58       	subi	r30, 0x8B	; 139
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a0 e0       	ldi	r26, 0x00	; 0
    187c:	b0 e4       	ldi	r27, 0x40	; 64
    187e:	80 83       	st	Z, r24
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	a2 83       	std	Z+2, r26	; 0x02
    1884:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1886:	8e 01       	movw	r16, r28
    1888:	0f 58       	subi	r16, 0x8F	; 143
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	fe 01       	movw	r30, r28
    188e:	eb 58       	subi	r30, 0x8B	; 139
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	2b ea       	ldi	r18, 0xAB	; 171
    189c:	3a ea       	ldi	r19, 0xAA	; 170
    189e:	4a ea       	ldi	r20, 0xAA	; 170
    18a0:	5e e3       	ldi	r21, 0x3E	; 62
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	f8 01       	movw	r30, r16
    18ac:	80 83       	st	Z, r24
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	a2 83       	std	Z+2, r26	; 0x02
    18b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b4:	fe 01       	movw	r30, r28
    18b6:	ef 58       	subi	r30, 0x8F	; 143
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	34 f4       	brge	.+12     	; 0x18de <main+0x462>
		__ticks = 1;
    18d2:	fe 01       	movw	r30, r28
    18d4:	e0 59       	subi	r30, 0x90	; 144
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	80 83       	st	Z, r24
    18dc:	e0 c0       	rjmp	.+448    	; 0x1a9e <main+0x622>
	else if (__tmp > 255)
    18de:	fe 01       	movw	r30, r28
    18e0:	ef 58       	subi	r30, 0x8F	; 143
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	53 e4       	ldi	r21, 0x43	; 67
    18f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18f8:	18 16       	cp	r1, r24
    18fa:	0c f0       	brlt	.+2      	; 0x18fe <main+0x482>
    18fc:	c0 c0       	rjmp	.+384    	; 0x1a7e <main+0x602>
	{
		_delay_ms(__us / 1000.0);
    18fe:	fe 01       	movw	r30, r28
    1900:	eb 58       	subi	r30, 0x8B	; 139
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a e7       	ldi	r20, 0x7A	; 122
    1912:	54 e4       	ldi	r21, 0x44	; 68
    1914:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	fe 01       	movw	r30, r28
    191e:	e4 59       	subi	r30, 0x94	; 148
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 83       	st	Z, r24
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	a2 83       	std	Z+2, r26	; 0x02
    1928:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192a:	8e 01       	movw	r16, r28
    192c:	08 59       	subi	r16, 0x98	; 152
    192e:	1f 4f       	sbci	r17, 0xFF	; 255
    1930:	fe 01       	movw	r30, r28
    1932:	e4 59       	subi	r30, 0x94	; 148
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	4a e7       	ldi	r20, 0x7A	; 122
    1944:	53 e4       	ldi	r21, 0x43	; 67
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	f8 01       	movw	r30, r16
    1950:	80 83       	st	Z, r24
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	a2 83       	std	Z+2, r26	; 0x02
    1956:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1958:	fe 01       	movw	r30, r28
    195a:	e8 59       	subi	r30, 0x98	; 152
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1972:	88 23       	and	r24, r24
    1974:	44 f4       	brge	.+16     	; 0x1986 <main+0x50a>
		__ticks = 1;
    1976:	fe 01       	movw	r30, r28
    1978:	ea 59       	subi	r30, 0x9A	; 154
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	91 83       	std	Z+1, r25	; 0x01
    1982:	80 83       	st	Z, r24
    1984:	64 c0       	rjmp	.+200    	; 0x1a4e <main+0x5d2>
	else if (__tmp > 65535)
    1986:	fe 01       	movw	r30, r28
    1988:	e8 59       	subi	r30, 0x98	; 152
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	60 81       	ld	r22, Z
    198e:	71 81       	ldd	r23, Z+1	; 0x01
    1990:	82 81       	ldd	r24, Z+2	; 0x02
    1992:	93 81       	ldd	r25, Z+3	; 0x03
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	3f ef       	ldi	r19, 0xFF	; 255
    1998:	4f e7       	ldi	r20, 0x7F	; 127
    199a:	57 e4       	ldi	r21, 0x47	; 71
    199c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	0c f0       	brlt	.+2      	; 0x19a6 <main+0x52a>
    19a4:	43 c0       	rjmp	.+134    	; 0x1a2c <main+0x5b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a6:	fe 01       	movw	r30, r28
    19a8:	e4 59       	subi	r30, 0x94	; 148
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e2       	ldi	r20, 0x20	; 32
    19ba:	51 e4       	ldi	r21, 0x41	; 65
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	8e 01       	movw	r16, r28
    19c6:	0a 59       	subi	r16, 0x9A	; 154
    19c8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ca:	bc 01       	movw	r22, r24
    19cc:	cd 01       	movw	r24, r26
    19ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	f8 01       	movw	r30, r16
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
    19dc:	1f c0       	rjmp	.+62     	; 0x1a1c <main+0x5a0>
    19de:	fe 01       	movw	r30, r28
    19e0:	ec 59       	subi	r30, 0x9C	; 156
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	89 e1       	ldi	r24, 0x19	; 25
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19ec:	fe 01       	movw	r30, r28
    19ee:	ec 59       	subi	r30, 0x9C	; 156
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	80 81       	ld	r24, Z
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <main+0x57a>
    19fa:	fe 01       	movw	r30, r28
    19fc:	ec 59       	subi	r30, 0x9C	; 156
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	de 01       	movw	r26, r28
    1a06:	aa 59       	subi	r26, 0x9A	; 154
    1a08:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ea 59       	subi	r30, 0x9A	; 154
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	11 96       	adiw	r26, 0x01	; 1
    1a18:	9c 93       	st	X, r25
    1a1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	ea 59       	subi	r30, 0x9A	; 154
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	d1 f6       	brne	.-76     	; 0x19de <main+0x562>
    1a2a:	4b c0       	rjmp	.+150    	; 0x1ac2 <main+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	8e 01       	movw	r16, r28
    1a2e:	0a 59       	subi	r16, 0x9A	; 154
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	fe 01       	movw	r30, r28
    1a34:	e8 59       	subi	r30, 0x98	; 152
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	f8 01       	movw	r30, r16
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	de 01       	movw	r26, r28
    1a50:	ae 59       	subi	r26, 0x9E	; 158
    1a52:	bf 4f       	sbci	r27, 0xFF	; 255
    1a54:	fe 01       	movw	r30, r28
    1a56:	ea 59       	subi	r30, 0x9A	; 154
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 81       	ld	r24, Z
    1a5c:	91 81       	ldd	r25, Z+1	; 0x01
    1a5e:	11 96       	adiw	r26, 0x01	; 1
    1a60:	9c 93       	st	X, r25
    1a62:	8e 93       	st	-X, r24
    1a64:	fe 01       	movw	r30, r28
    1a66:	ee 59       	subi	r30, 0x9E	; 158
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <main+0x5f2>
    1a72:	fe 01       	movw	r30, r28
    1a74:	ee 59       	subi	r30, 0x9E	; 158
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
    1a7c:	22 c0       	rjmp	.+68     	; 0x1ac2 <main+0x646>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a7e:	8e 01       	movw	r16, r28
    1a80:	00 59       	subi	r16, 0x90	; 144
    1a82:	1f 4f       	sbci	r17, 0xFF	; 255
    1a84:	fe 01       	movw	r30, r28
    1a86:	ef 58       	subi	r30, 0x8F	; 143
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	60 81       	ld	r22, Z
    1a8c:	71 81       	ldd	r23, Z+1	; 0x01
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	80 83       	st	Z, r24
    1a9e:	de 01       	movw	r26, r28
    1aa0:	af 59       	subi	r26, 0x9F	; 159
    1aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e0 59       	subi	r30, 0x90	; 144
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 81       	ld	r24, Z
    1aac:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1aae:	fe 01       	movw	r30, r28
    1ab0:	ef 59       	subi	r30, 0x9F	; 159
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8a 95       	dec	r24
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <main+0x63a>
    1aba:	fe 01       	movw	r30, r28
    1abc:	ef 59       	subi	r30, 0x9F	; 159
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 83       	st	Z, r24

		_delay_us(2);

		PORTA &= ~(1 << PA1);
    1ac2:	ab e3       	ldi	r26, 0x3B	; 59
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	eb e3       	ldi	r30, 0x3B	; 59
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8d 7f       	andi	r24, 0xFD	; 253
    1ace:	8c 93       	st	X, r24

		PORTC = (PORTC & 0xF0) | (mins1 & 0x0F);
    1ad0:	a5 e3       	ldi	r26, 0x35	; 53
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e5 e3       	ldi	r30, 0x35	; 53
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	28 2f       	mov	r18, r24
    1adc:	20 7f       	andi	r18, 0xF0	; 240
    1ade:	80 91 72 00 	lds	r24, 0x0072
    1ae2:	90 91 73 00 	lds	r25, 0x0073
    1ae6:	8f 70       	andi	r24, 0x0F	; 15
    1ae8:	82 2b       	or	r24, r18
    1aea:	8c 93       	st	X, r24

		PORTA |=  (1 << PA2);
    1aec:	ab e3       	ldi	r26, 0x3B	; 59
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	eb e3       	ldi	r30, 0x3B	; 59
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	84 60       	ori	r24, 0x04	; 4
    1af8:	8c 93       	st	X, r24
    1afa:	fe 01       	movw	r30, r28
    1afc:	e3 5a       	subi	r30, 0xA3	; 163
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 e0       	ldi	r26, 0x00	; 0
    1b06:	b0 e4       	ldi	r27, 0x40	; 64
    1b08:	80 83       	st	Z, r24
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	a2 83       	std	Z+2, r26	; 0x02
    1b0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b10:	8e 01       	movw	r16, r28
    1b12:	07 5a       	subi	r16, 0xA7	; 167
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	fe 01       	movw	r30, r28
    1b18:	e3 5a       	subi	r30, 0xA3	; 163
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	60 81       	ld	r22, Z
    1b1e:	71 81       	ldd	r23, Z+1	; 0x01
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	2b ea       	ldi	r18, 0xAB	; 171
    1b26:	3a ea       	ldi	r19, 0xAA	; 170
    1b28:	4a ea       	ldi	r20, 0xAA	; 170
    1b2a:	5e e3       	ldi	r21, 0x3E	; 62
    1b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	f8 01       	movw	r30, r16
    1b36:	80 83       	st	Z, r24
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	a2 83       	std	Z+2, r26	; 0x02
    1b3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e7 5a       	subi	r30, 0xA7	; 167
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	60 81       	ld	r22, Z
    1b46:	71 81       	ldd	r23, Z+1	; 0x01
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	34 f4       	brge	.+12     	; 0x1b68 <main+0x6ec>
		__ticks = 1;
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e8 5a       	subi	r30, 0xA8	; 168
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	80 83       	st	Z, r24
    1b66:	e0 c0       	rjmp	.+448    	; 0x1d28 <main+0x8ac>
	else if (__tmp > 255)
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e7 5a       	subi	r30, 0xA7	; 167
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	60 81       	ld	r22, Z
    1b70:	71 81       	ldd	r23, Z+1	; 0x01
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	53 e4       	ldi	r21, 0x43	; 67
    1b7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	0c f0       	brlt	.+2      	; 0x1b88 <main+0x70c>
    1b86:	c0 c0       	rjmp	.+384    	; 0x1d08 <main+0x88c>
	{
		_delay_ms(__us / 1000.0);
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e3 5a       	subi	r30, 0xA3	; 163
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	60 81       	ld	r22, Z
    1b90:	71 81       	ldd	r23, Z+1	; 0x01
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a e7       	ldi	r20, 0x7A	; 122
    1b9c:	54 e4       	ldi	r21, 0x44	; 68
    1b9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	ec 5a       	subi	r30, 0xAC	; 172
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	80 83       	st	Z, r24
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	a2 83       	std	Z+2, r26	; 0x02
    1bb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	8e 01       	movw	r16, r28
    1bb6:	00 5b       	subi	r16, 0xB0	; 176
    1bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bba:	fe 01       	movw	r30, r28
    1bbc:	ec 5a       	subi	r30, 0xAC	; 172
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	60 81       	ld	r22, Z
    1bc2:	71 81       	ldd	r23, Z+1	; 0x01
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	93 81       	ldd	r25, Z+3	; 0x03
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	4a e7       	ldi	r20, 0x7A	; 122
    1bce:	53 e4       	ldi	r21, 0x43	; 67
    1bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	f8 01       	movw	r30, r16
    1bda:	80 83       	st	Z, r24
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be2:	fe 01       	movw	r30, r28
    1be4:	e0 5b       	subi	r30, 0xB0	; 176
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e8       	ldi	r20, 0x80	; 128
    1bf6:	5f e3       	ldi	r21, 0x3F	; 63
    1bf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	44 f4       	brge	.+16     	; 0x1c10 <main+0x794>
		__ticks = 1;
    1c00:	fe 01       	movw	r30, r28
    1c02:	e2 5b       	subi	r30, 0xB2	; 178
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	80 83       	st	Z, r24
    1c0e:	64 c0       	rjmp	.+200    	; 0x1cd8 <main+0x85c>
	else if (__tmp > 65535)
    1c10:	fe 01       	movw	r30, r28
    1c12:	e0 5b       	subi	r30, 0xB0	; 176
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	3f ef       	ldi	r19, 0xFF	; 255
    1c22:	4f e7       	ldi	r20, 0x7F	; 127
    1c24:	57 e4       	ldi	r21, 0x47	; 71
    1c26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c2a:	18 16       	cp	r1, r24
    1c2c:	0c f0       	brlt	.+2      	; 0x1c30 <main+0x7b4>
    1c2e:	43 c0       	rjmp	.+134    	; 0x1cb6 <main+0x83a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c30:	fe 01       	movw	r30, r28
    1c32:	ec 5a       	subi	r30, 0xAC	; 172
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e2       	ldi	r20, 0x20	; 32
    1c44:	51 e4       	ldi	r21, 0x41	; 65
    1c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8e 01       	movw	r16, r28
    1c50:	02 5b       	subi	r16, 0xB2	; 178
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	f8 01       	movw	r30, r16
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
    1c66:	1f c0       	rjmp	.+62     	; 0x1ca6 <main+0x82a>
    1c68:	fe 01       	movw	r30, r28
    1c6a:	e4 5b       	subi	r30, 0xB4	; 180
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	89 e1       	ldi	r24, 0x19	; 25
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c76:	fe 01       	movw	r30, r28
    1c78:	e4 5b       	subi	r30, 0xB4	; 180
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <main+0x804>
    1c84:	fe 01       	movw	r30, r28
    1c86:	e4 5b       	subi	r30, 0xB4	; 180
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8e:	de 01       	movw	r26, r28
    1c90:	a2 5b       	subi	r26, 0xB2	; 178
    1c92:	bf 4f       	sbci	r27, 0xFF	; 255
    1c94:	fe 01       	movw	r30, r28
    1c96:	e2 5b       	subi	r30, 0xB2	; 178
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	11 96       	adiw	r26, 0x01	; 1
    1ca2:	9c 93       	st	X, r25
    1ca4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e2 5b       	subi	r30, 0xB2	; 178
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	d1 f6       	brne	.-76     	; 0x1c68 <main+0x7ec>
    1cb4:	4b c0       	rjmp	.+150    	; 0x1d4c <main+0x8d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	02 5b       	subi	r16, 0xB2	; 178
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e0 5b       	subi	r30, 0xB0	; 176
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	60 81       	ld	r22, Z
    1cc4:	71 81       	ldd	r23, Z+1	; 0x01
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	80 83       	st	Z, r24
    1cd8:	de 01       	movw	r26, r28
    1cda:	a6 5b       	subi	r26, 0xB6	; 182
    1cdc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e2 5b       	subi	r30, 0xB2	; 178
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	11 96       	adiw	r26, 0x01	; 1
    1cea:	9c 93       	st	X, r25
    1cec:	8e 93       	st	-X, r24
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e6 5b       	subi	r30, 0xB6	; 182
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <main+0x87c>
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e6 5b       	subi	r30, 0xB6	; 182
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	22 c0       	rjmp	.+68     	; 0x1d4c <main+0x8d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d08:	8e 01       	movw	r16, r28
    1d0a:	08 5a       	subi	r16, 0xA8	; 168
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e7 5a       	subi	r30, 0xA7	; 167
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	60 81       	ld	r22, Z
    1d16:	71 81       	ldd	r23, Z+1	; 0x01
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	f8 01       	movw	r30, r16
    1d26:	80 83       	st	Z, r24
    1d28:	de 01       	movw	r26, r28
    1d2a:	a7 5b       	subi	r26, 0xB7	; 183
    1d2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e8 5a       	subi	r30, 0xA8	; 168
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e7 5b       	subi	r30, 0xB7	; 183
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	80 81       	ld	r24, Z
    1d40:	8a 95       	dec	r24
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <main+0x8c4>
    1d44:	fe 01       	movw	r30, r28
    1d46:	e7 5b       	subi	r30, 0xB7	; 183
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 83       	st	Z, r24

		_delay_us(2);

		PORTA &= ~(1 << PA2);
    1d4c:	ab e3       	ldi	r26, 0x3B	; 59
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	eb e3       	ldi	r30, 0x3B	; 59
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	8b 7f       	andi	r24, 0xFB	; 251
    1d58:	8c 93       	st	X, r24

		PORTC = (PORTC & 0xF0) | (mins2 & 0x0F);
    1d5a:	a5 e3       	ldi	r26, 0x35	; 53
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e5 e3       	ldi	r30, 0x35	; 53
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	28 2f       	mov	r18, r24
    1d66:	20 7f       	andi	r18, 0xF0	; 240
    1d68:	80 91 74 00 	lds	r24, 0x0074
    1d6c:	90 91 75 00 	lds	r25, 0x0075
    1d70:	8f 70       	andi	r24, 0x0F	; 15
    1d72:	82 2b       	or	r24, r18
    1d74:	8c 93       	st	X, r24

		PORTA |=  (1 << PA3);
    1d76:	ab e3       	ldi	r26, 0x3B	; 59
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	eb e3       	ldi	r30, 0x3B	; 59
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	88 60       	ori	r24, 0x08	; 8
    1d82:	8c 93       	st	X, r24
    1d84:	fe 01       	movw	r30, r28
    1d86:	eb 5b       	subi	r30, 0xBB	; 187
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 e0       	ldi	r26, 0x00	; 0
    1d90:	b0 e4       	ldi	r27, 0x40	; 64
    1d92:	80 83       	st	Z, r24
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	a2 83       	std	Z+2, r26	; 0x02
    1d98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d9a:	8e 01       	movw	r16, r28
    1d9c:	0f 5b       	subi	r16, 0xBF	; 191
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1da0:	fe 01       	movw	r30, r28
    1da2:	eb 5b       	subi	r30, 0xBB	; 187
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	2b ea       	ldi	r18, 0xAB	; 171
    1db0:	3a ea       	ldi	r19, 0xAA	; 170
    1db2:	4a ea       	ldi	r20, 0xAA	; 170
    1db4:	5e e3       	ldi	r21, 0x3E	; 62
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	80 83       	st	Z, r24
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	a2 83       	std	Z+2, r26	; 0x02
    1dc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dc8:	fe 01       	movw	r30, r28
    1dca:	ef 5b       	subi	r30, 0xBF	; 191
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e8       	ldi	r20, 0x80	; 128
    1ddc:	5f e3       	ldi	r21, 0x3F	; 63
    1dde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de2:	88 23       	and	r24, r24
    1de4:	34 f4       	brge	.+12     	; 0x1df2 <main+0x976>
		__ticks = 1;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	fe 01       	movw	r30, r28
    1dea:	e0 5c       	subi	r30, 0xC0	; 192
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 83       	st	Z, r24
    1df0:	9d c0       	rjmp	.+314    	; 0x1f2c <main+0xab0>
	else if (__tmp > 255)
    1df2:	fe 01       	movw	r30, r28
    1df4:	ef 5b       	subi	r30, 0xBF	; 191
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	60 81       	ld	r22, Z
    1dfa:	71 81       	ldd	r23, Z+1	; 0x01
    1dfc:	82 81       	ldd	r24, Z+2	; 0x02
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	4f e7       	ldi	r20, 0x7F	; 127
    1e06:	53 e4       	ldi	r21, 0x43	; 67
    1e08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0c:	18 16       	cp	r1, r24
    1e0e:	0c f0       	brlt	.+2      	; 0x1e12 <main+0x996>
    1e10:	7e c0       	rjmp	.+252    	; 0x1f0e <main+0xa92>
	{
		_delay_ms(__us / 1000.0);
    1e12:	fe 01       	movw	r30, r28
    1e14:	eb 5b       	subi	r30, 0xBB	; 187
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	60 81       	ld	r22, Z
    1e1a:	71 81       	ldd	r23, Z+1	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	4a e7       	ldi	r20, 0x7A	; 122
    1e26:	54 e4       	ldi	r21, 0x44	; 68
    1e28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	8c af       	std	Y+60, r24	; 0x3c
    1e32:	9d af       	std	Y+61, r25	; 0x3d
    1e34:	ae af       	std	Y+62, r26	; 0x3e
    1e36:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e3a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a e7       	ldi	r20, 0x7A	; 122
    1e46:	53 e4       	ldi	r21, 0x43	; 67
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	88 af       	std	Y+56, r24	; 0x38
    1e52:	99 af       	std	Y+57, r25	; 0x39
    1e54:	aa af       	std	Y+58, r26	; 0x3a
    1e56:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1e58:	68 ad       	ldd	r22, Y+56	; 0x38
    1e5a:	79 ad       	ldd	r23, Y+57	; 0x39
    1e5c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e5e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <main+0x9fe>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9f ab       	std	Y+55, r25	; 0x37
    1e76:	8e ab       	std	Y+54, r24	; 0x36
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <main+0xa7c>
	else if (__tmp > 65535)
    1e7a:	68 ad       	ldd	r22, Y+56	; 0x38
    1e7c:	79 ad       	ldd	r23, Y+57	; 0x39
    1e7e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e80:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <main+0xa68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e94:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e96:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e98:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9f ab       	std	Y+55, r25	; 0x37
    1eb8:	8e ab       	std	Y+54, r24	; 0x36
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <main+0xa5e>
    1ebc:	89 e1       	ldi	r24, 0x19	; 25
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9d ab       	std	Y+53, r25	; 0x35
    1ec2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ec4:	8c a9       	ldd	r24, Y+52	; 0x34
    1ec6:	9d a9       	ldd	r25, Y+53	; 0x35
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <main+0xa4c>
    1ecc:	9d ab       	std	Y+53, r25	; 0x35
    1ece:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	8e a9       	ldd	r24, Y+54	; 0x36
    1ed2:	9f a9       	ldd	r25, Y+55	; 0x37
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9f ab       	std	Y+55, r25	; 0x37
    1ed8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	8e a9       	ldd	r24, Y+54	; 0x36
    1edc:	9f a9       	ldd	r25, Y+55	; 0x37
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <main+0xa40>
    1ee2:	2d c0       	rjmp	.+90     	; 0x1f3e <main+0xac2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	68 ad       	ldd	r22, Y+56	; 0x38
    1ee6:	79 ad       	ldd	r23, Y+57	; 0x39
    1ee8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1eea:	9b ad       	ldd	r25, Y+59	; 0x3b
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9f ab       	std	Y+55, r25	; 0x37
    1ef6:	8e ab       	std	Y+54, r24	; 0x36
    1ef8:	8e a9       	ldd	r24, Y+54	; 0x36
    1efa:	9f a9       	ldd	r25, Y+55	; 0x37
    1efc:	9b ab       	std	Y+51, r25	; 0x33
    1efe:	8a ab       	std	Y+50, r24	; 0x32
    1f00:	8a a9       	ldd	r24, Y+50	; 0x32
    1f02:	9b a9       	ldd	r25, Y+51	; 0x33
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <main+0xa88>
    1f08:	9b ab       	std	Y+51, r25	; 0x33
    1f0a:	8a ab       	std	Y+50, r24	; 0x32
    1f0c:	18 c0       	rjmp	.+48     	; 0x1f3e <main+0xac2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ef 5b       	subi	r30, 0xBF	; 191
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	fe 01       	movw	r30, r28
    1f26:	e0 5c       	subi	r30, 0xC0	; 192
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	80 83       	st	Z, r24
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e0 5c       	subi	r30, 0xC0	; 192
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 81       	ld	r24, Z
    1f34:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f36:	89 a9       	ldd	r24, Y+49	; 0x31
    1f38:	8a 95       	dec	r24
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <main+0xabc>
    1f3c:	89 ab       	std	Y+49, r24	; 0x31

		_delay_us(2);

		PORTA &= ~(1 << PA3);
    1f3e:	ab e3       	ldi	r26, 0x3B	; 59
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	eb e3       	ldi	r30, 0x3B	; 59
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	87 7f       	andi	r24, 0xF7	; 247
    1f4a:	8c 93       	st	X, r24

		PORTC = (PORTC & 0xF0) | (hours1 & 0x0F);
    1f4c:	a5 e3       	ldi	r26, 0x35	; 53
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e5 e3       	ldi	r30, 0x35	; 53
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	28 2f       	mov	r18, r24
    1f58:	20 7f       	andi	r18, 0xF0	; 240
    1f5a:	80 91 76 00 	lds	r24, 0x0076
    1f5e:	90 91 77 00 	lds	r25, 0x0077
    1f62:	8f 70       	andi	r24, 0x0F	; 15
    1f64:	82 2b       	or	r24, r18
    1f66:	8c 93       	st	X, r24

		PORTA |=  (1 << PA4);
    1f68:	ab e3       	ldi	r26, 0x3B	; 59
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	eb e3       	ldi	r30, 0x3B	; 59
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 61       	ori	r24, 0x10	; 16
    1f74:	8c 93       	st	X, r24
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	a0 e0       	ldi	r26, 0x00	; 0
    1f7c:	b0 e4       	ldi	r27, 0x40	; 64
    1f7e:	8d a7       	std	Y+45, r24	; 0x2d
    1f80:	9e a7       	std	Y+46, r25	; 0x2e
    1f82:	af a7       	std	Y+47, r26	; 0x2f
    1f84:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f86:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f88:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8e:	2b ea       	ldi	r18, 0xAB	; 171
    1f90:	3a ea       	ldi	r19, 0xAA	; 170
    1f92:	4a ea       	ldi	r20, 0xAA	; 170
    1f94:	5e e3       	ldi	r21, 0x3E	; 62
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	89 a7       	std	Y+41, r24	; 0x29
    1fa0:	9a a7       	std	Y+42, r25	; 0x2a
    1fa2:	ab a7       	std	Y+43, r26	; 0x2b
    1fa4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1fa6:	69 a5       	ldd	r22, Y+41	; 0x29
    1fa8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1faa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fac:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e8       	ldi	r20, 0x80	; 128
    1fb4:	5f e3       	ldi	r21, 0x3F	; 63
    1fb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fba:	88 23       	and	r24, r24
    1fbc:	1c f4       	brge	.+6      	; 0x1fc4 <main+0xb48>
		__ticks = 1;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	88 a7       	std	Y+40, r24	; 0x28
    1fc2:	91 c0       	rjmp	.+290    	; 0x20e6 <main+0xc6a>
	else if (__tmp > 255)
    1fc4:	69 a5       	ldd	r22, Y+41	; 0x29
    1fc6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fca:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4f e7       	ldi	r20, 0x7F	; 127
    1fd2:	53 e4       	ldi	r21, 0x43	; 67
    1fd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd8:	18 16       	cp	r1, r24
    1fda:	0c f0       	brlt	.+2      	; 0x1fde <main+0xb62>
    1fdc:	7b c0       	rjmp	.+246    	; 0x20d4 <main+0xc58>
	{
		_delay_ms(__us / 1000.0);
    1fde:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fe0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a e7       	ldi	r20, 0x7A	; 122
    1fec:	54 e4       	ldi	r21, 0x44	; 68
    1fee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	8c a3       	std	Y+36, r24	; 0x24
    1ff8:	9d a3       	std	Y+37, r25	; 0x25
    1ffa:	ae a3       	std	Y+38, r26	; 0x26
    1ffc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	6c a1       	ldd	r22, Y+36	; 0x24
    2000:	7d a1       	ldd	r23, Y+37	; 0x25
    2002:	8e a1       	ldd	r24, Y+38	; 0x26
    2004:	9f a1       	ldd	r25, Y+39	; 0x27
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a e7       	ldi	r20, 0x7A	; 122
    200c:	53 e4       	ldi	r21, 0x43	; 67
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	88 a3       	std	Y+32, r24	; 0x20
    2018:	99 a3       	std	Y+33, r25	; 0x21
    201a:	aa a3       	std	Y+34, r26	; 0x22
    201c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    201e:	68 a1       	ldd	r22, Y+32	; 0x20
    2020:	79 a1       	ldd	r23, Y+33	; 0x21
    2022:	8a a1       	ldd	r24, Y+34	; 0x22
    2024:	9b a1       	ldd	r25, Y+35	; 0x23
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <main+0xbc4>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9f 8f       	std	Y+31, r25	; 0x1f
    203c:	8e 8f       	std	Y+30, r24	; 0x1e
    203e:	3f c0       	rjmp	.+126    	; 0x20be <main+0xc42>
	else if (__tmp > 65535)
    2040:	68 a1       	ldd	r22, Y+32	; 0x20
    2042:	79 a1       	ldd	r23, Y+33	; 0x21
    2044:	8a a1       	ldd	r24, Y+34	; 0x22
    2046:	9b a1       	ldd	r25, Y+35	; 0x23
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <main+0xc2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	6c a1       	ldd	r22, Y+36	; 0x24
    205a:	7d a1       	ldd	r23, Y+37	; 0x25
    205c:	8e a1       	ldd	r24, Y+38	; 0x26
    205e:	9f a1       	ldd	r25, Y+39	; 0x27
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9f 8f       	std	Y+31, r25	; 0x1f
    207e:	8e 8f       	std	Y+30, r24	; 0x1e
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <main+0xc24>
    2082:	89 e1       	ldi	r24, 0x19	; 25
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9d 8f       	std	Y+29, r25	; 0x1d
    2088:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    208a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    208c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <main+0xc12>
    2092:	9d 8f       	std	Y+29, r25	; 0x1d
    2094:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2098:	9f 8d       	ldd	r25, Y+31	; 0x1f
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9f 8f       	std	Y+31, r25	; 0x1f
    209e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <main+0xc06>
    20a8:	24 c0       	rjmp	.+72     	; 0x20f2 <main+0xc76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	68 a1       	ldd	r22, Y+32	; 0x20
    20ac:	79 a1       	ldd	r23, Y+33	; 0x21
    20ae:	8a a1       	ldd	r24, Y+34	; 0x22
    20b0:	9b a1       	ldd	r25, Y+35	; 0x23
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9f 8f       	std	Y+31, r25	; 0x1f
    20bc:	8e 8f       	std	Y+30, r24	; 0x1e
    20be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20c2:	9b 8f       	std	Y+27, r25	; 0x1b
    20c4:	8a 8f       	std	Y+26, r24	; 0x1a
    20c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <main+0xc4e>
    20ce:	9b 8f       	std	Y+27, r25	; 0x1b
    20d0:	8a 8f       	std	Y+26, r24	; 0x1a
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <main+0xc76>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20d4:	69 a5       	ldd	r22, Y+41	; 0x29
    20d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    20d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    20da:	9c a5       	ldd	r25, Y+44	; 0x2c
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	88 a7       	std	Y+40, r24	; 0x28
    20e6:	88 a5       	ldd	r24, Y+40	; 0x28
    20e8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20ea:	89 8d       	ldd	r24, Y+25	; 0x19
    20ec:	8a 95       	dec	r24
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <main+0xc70>
    20f0:	89 8f       	std	Y+25, r24	; 0x19

		_delay_us(2);

		PORTA &= ~(1 << PA4);
    20f2:	ab e3       	ldi	r26, 0x3B	; 59
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	eb e3       	ldi	r30, 0x3B	; 59
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	8f 7e       	andi	r24, 0xEF	; 239
    20fe:	8c 93       	st	X, r24

		PORTC = (PORTC & 0xF0) | (hours2 & 0x0F);
    2100:	a5 e3       	ldi	r26, 0x35	; 53
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e5 e3       	ldi	r30, 0x35	; 53
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	28 2f       	mov	r18, r24
    210c:	20 7f       	andi	r18, 0xF0	; 240
    210e:	80 91 78 00 	lds	r24, 0x0078
    2112:	90 91 79 00 	lds	r25, 0x0079
    2116:	8f 70       	andi	r24, 0x0F	; 15
    2118:	82 2b       	or	r24, r18
    211a:	8c 93       	st	X, r24

		PORTA |=  (1 << PA5);
    211c:	ab e3       	ldi	r26, 0x3B	; 59
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	eb e3       	ldi	r30, 0x3B	; 59
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	80 62       	ori	r24, 0x20	; 32
    2128:	8c 93       	st	X, r24
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 e0       	ldi	r26, 0x00	; 0
    2130:	b0 e4       	ldi	r27, 0x40	; 64
    2132:	8d 8b       	std	Y+21, r24	; 0x15
    2134:	9e 8b       	std	Y+22, r25	; 0x16
    2136:	af 8b       	std	Y+23, r26	; 0x17
    2138:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    213a:	6d 89       	ldd	r22, Y+21	; 0x15
    213c:	7e 89       	ldd	r23, Y+22	; 0x16
    213e:	8f 89       	ldd	r24, Y+23	; 0x17
    2140:	98 8d       	ldd	r25, Y+24	; 0x18
    2142:	2b ea       	ldi	r18, 0xAB	; 171
    2144:	3a ea       	ldi	r19, 0xAA	; 170
    2146:	4a ea       	ldi	r20, 0xAA	; 170
    2148:	5e e3       	ldi	r21, 0x3E	; 62
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	89 8b       	std	Y+17, r24	; 0x11
    2154:	9a 8b       	std	Y+18, r25	; 0x12
    2156:	ab 8b       	std	Y+19, r26	; 0x13
    2158:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    215a:	69 89       	ldd	r22, Y+17	; 0x11
    215c:	7a 89       	ldd	r23, Y+18	; 0x12
    215e:	8b 89       	ldd	r24, Y+19	; 0x13
    2160:	9c 89       	ldd	r25, Y+20	; 0x14
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	1c f4       	brge	.+6      	; 0x2178 <main+0xcfc>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	88 8b       	std	Y+16, r24	; 0x10
    2176:	91 c0       	rjmp	.+290    	; 0x229a <main+0xe1e>
	else if (__tmp > 255)
    2178:	69 89       	ldd	r22, Y+17	; 0x11
    217a:	7a 89       	ldd	r23, Y+18	; 0x12
    217c:	8b 89       	ldd	r24, Y+19	; 0x13
    217e:	9c 89       	ldd	r25, Y+20	; 0x14
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	53 e4       	ldi	r21, 0x43	; 67
    2188:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	0c f0       	brlt	.+2      	; 0x2192 <main+0xd16>
    2190:	7b c0       	rjmp	.+246    	; 0x2288 <main+0xe0c>
	{
		_delay_ms(__us / 1000.0);
    2192:	6d 89       	ldd	r22, Y+21	; 0x15
    2194:	7e 89       	ldd	r23, Y+22	; 0x16
    2196:	8f 89       	ldd	r24, Y+23	; 0x17
    2198:	98 8d       	ldd	r25, Y+24	; 0x18
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a e7       	ldi	r20, 0x7A	; 122
    21a0:	54 e4       	ldi	r21, 0x44	; 68
    21a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	8c 87       	std	Y+12, r24	; 0x0c
    21ac:	9d 87       	std	Y+13, r25	; 0x0d
    21ae:	ae 87       	std	Y+14, r26	; 0x0e
    21b0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    21b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    21b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    21b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a e7       	ldi	r20, 0x7A	; 122
    21c0:	53 e4       	ldi	r21, 0x43	; 67
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	88 87       	std	Y+8, r24	; 0x08
    21cc:	99 87       	std	Y+9, r25	; 0x09
    21ce:	aa 87       	std	Y+10, r26	; 0x0a
    21d0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    21d2:	68 85       	ldd	r22, Y+8	; 0x08
    21d4:	79 85       	ldd	r23, Y+9	; 0x09
    21d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <main+0xd78>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9f 83       	std	Y+7, r25	; 0x07
    21f0:	8e 83       	std	Y+6, r24	; 0x06
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <main+0xdf6>
	else if (__tmp > 65535)
    21f4:	68 85       	ldd	r22, Y+8	; 0x08
    21f6:	79 85       	ldd	r23, Y+9	; 0x09
    21f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <main+0xde2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	6c 85       	ldd	r22, Y+12	; 0x0c
    220e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2210:	8e 85       	ldd	r24, Y+14	; 0x0e
    2212:	9f 85       	ldd	r25, Y+15	; 0x0f
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9f 83       	std	Y+7, r25	; 0x07
    2232:	8e 83       	std	Y+6, r24	; 0x06
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <main+0xdd8>
    2236:	89 e1       	ldi	r24, 0x19	; 25
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9d 83       	std	Y+5, r25	; 0x05
    223c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    223e:	8c 81       	ldd	r24, Y+4	; 0x04
    2240:	9d 81       	ldd	r25, Y+5	; 0x05
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <main+0xdc6>
    2246:	9d 83       	std	Y+5, r25	; 0x05
    2248:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	9f 81       	ldd	r25, Y+7	; 0x07
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9f 83       	std	Y+7, r25	; 0x07
    2252:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8e 81       	ldd	r24, Y+6	; 0x06
    2256:	9f 81       	ldd	r25, Y+7	; 0x07
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <main+0xdba>
    225c:	24 c0       	rjmp	.+72     	; 0x22a6 <main+0xe2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	68 85       	ldd	r22, Y+8	; 0x08
    2260:	79 85       	ldd	r23, Y+9	; 0x09
    2262:	8a 85       	ldd	r24, Y+10	; 0x0a
    2264:	9b 85       	ldd	r25, Y+11	; 0x0b
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9f 83       	std	Y+7, r25	; 0x07
    2270:	8e 83       	std	Y+6, r24	; 0x06
    2272:	8e 81       	ldd	r24, Y+6	; 0x06
    2274:	9f 81       	ldd	r25, Y+7	; 0x07
    2276:	9b 83       	std	Y+3, r25	; 0x03
    2278:	8a 83       	std	Y+2, r24	; 0x02
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	9b 81       	ldd	r25, Y+3	; 0x03
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <main+0xe02>
    2282:	9b 83       	std	Y+3, r25	; 0x03
    2284:	8a 83       	std	Y+2, r24	; 0x02
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <main+0xe2a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2288:	69 89       	ldd	r22, Y+17	; 0x11
    228a:	7a 89       	ldd	r23, Y+18	; 0x12
    228c:	8b 89       	ldd	r24, Y+19	; 0x13
    228e:	9c 89       	ldd	r25, Y+20	; 0x14
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	88 8b       	std	Y+16, r24	; 0x10
    229a:	88 89       	ldd	r24, Y+16	; 0x10
    229c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	8a 95       	dec	r24
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <main+0xe24>
    22a4:	89 83       	std	Y+1, r24	; 0x01

		_delay_us(2);

		PORTA &= ~(1 << PA5);
    22a6:	ab e3       	ldi	r26, 0x3B	; 59
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	eb e3       	ldi	r30, 0x3B	; 59
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	8f 7d       	andi	r24, 0xDF	; 223
    22b2:	8c 93       	st	X, r24
    22b4:	83 c9       	rjmp	.-3322   	; 0x15bc <main+0x140>

000022b6 <__vector_11>:
#include "std_types.h"
#include <avr/interrupt.h>
extern int sec1 , sec2 , mins1 , mins2 , hours1 , hours2 ;
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect) {
    22b6:	1f 92       	push	r1
    22b8:	0f 92       	push	r0
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	0f 92       	push	r0
    22be:	11 24       	eor	r1, r1
    22c0:	8f 93       	push	r24
    22c2:	9f 93       	push	r25
    22c4:	ef 93       	push	r30
    22c6:	ff 93       	push	r31
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
	if (sec1 == 9) {
    22d0:	80 91 6e 00 	lds	r24, 0x006E
    22d4:	90 91 6f 00 	lds	r25, 0x006F
    22d8:	89 30       	cpi	r24, 0x09	; 9
    22da:	91 05       	cpc	r25, r1
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <__vector_11+0x2a>
    22de:	89 c0       	rjmp	.+274    	; 0x23f2 <__vector_11+0x13c>
				sec1 = 0;
    22e0:	10 92 6f 00 	sts	0x006F, r1
    22e4:	10 92 6e 00 	sts	0x006E, r1
				if (sec2 == 5) {
    22e8:	80 91 70 00 	lds	r24, 0x0070
    22ec:	90 91 71 00 	lds	r25, 0x0071
    22f0:	85 30       	cpi	r24, 0x05	; 5
    22f2:	91 05       	cpc	r25, r1
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <__vector_11+0x42>
    22f6:	73 c0       	rjmp	.+230    	; 0x23de <__vector_11+0x128>
					sec2 = 0;
    22f8:	10 92 71 00 	sts	0x0071, r1
    22fc:	10 92 70 00 	sts	0x0070, r1
					if (mins1 == 9) {
    2300:	80 91 72 00 	lds	r24, 0x0072
    2304:	90 91 73 00 	lds	r25, 0x0073
    2308:	89 30       	cpi	r24, 0x09	; 9
    230a:	91 05       	cpc	r25, r1
    230c:	09 f0       	breq	.+2      	; 0x2310 <__vector_11+0x5a>
    230e:	5d c0       	rjmp	.+186    	; 0x23ca <__vector_11+0x114>
						mins1 = 0;
    2310:	10 92 73 00 	sts	0x0073, r1
    2314:	10 92 72 00 	sts	0x0072, r1
						if (mins2 == 5) {
    2318:	80 91 74 00 	lds	r24, 0x0074
    231c:	90 91 75 00 	lds	r25, 0x0075
    2320:	85 30       	cpi	r24, 0x05	; 5
    2322:	91 05       	cpc	r25, r1
    2324:	09 f0       	breq	.+2      	; 0x2328 <__vector_11+0x72>
    2326:	47 c0       	rjmp	.+142    	; 0x23b6 <__vector_11+0x100>
							mins2 = 0;
    2328:	10 92 75 00 	sts	0x0075, r1
    232c:	10 92 74 00 	sts	0x0074, r1
							if (hours1 == 9) {
    2330:	80 91 76 00 	lds	r24, 0x0076
    2334:	90 91 77 00 	lds	r25, 0x0077
    2338:	89 30       	cpi	r24, 0x09	; 9
    233a:	91 05       	cpc	r25, r1
    233c:	91 f5       	brne	.+100    	; 0x23a2 <__vector_11+0xec>
								hours1 = 0;
    233e:	10 92 77 00 	sts	0x0077, r1
    2342:	10 92 76 00 	sts	0x0076, r1
								if (hours2 == 9) {
    2346:	80 91 78 00 	lds	r24, 0x0078
    234a:	90 91 79 00 	lds	r25, 0x0079
    234e:	89 30       	cpi	r24, 0x09	; 9
    2350:	91 05       	cpc	r25, r1
    2352:	e9 f4       	brne	.+58     	; 0x238e <__vector_11+0xd8>
									sec1 = 0, sec2 = 0, mins1 = 0, mins2 = 0, hours1 = 0, hours2 = 0,TCNT1=0;
    2354:	10 92 6f 00 	sts	0x006F, r1
    2358:	10 92 6e 00 	sts	0x006E, r1
    235c:	10 92 71 00 	sts	0x0071, r1
    2360:	10 92 70 00 	sts	0x0070, r1
    2364:	10 92 73 00 	sts	0x0073, r1
    2368:	10 92 72 00 	sts	0x0072, r1
    236c:	10 92 75 00 	sts	0x0075, r1
    2370:	10 92 74 00 	sts	0x0074, r1
    2374:	10 92 77 00 	sts	0x0077, r1
    2378:	10 92 76 00 	sts	0x0076, r1
    237c:	10 92 79 00 	sts	0x0079, r1
    2380:	10 92 78 00 	sts	0x0078, r1
    2384:	ec e4       	ldi	r30, 0x4C	; 76
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	11 82       	std	Z+1, r1	; 0x01
    238a:	10 82       	st	Z, r1
    238c:	3b c0       	rjmp	.+118    	; 0x2404 <__vector_11+0x14e>
								} else {
									hours2++;
    238e:	80 91 78 00 	lds	r24, 0x0078
    2392:	90 91 79 00 	lds	r25, 0x0079
    2396:	01 96       	adiw	r24, 0x01	; 1
    2398:	90 93 79 00 	sts	0x0079, r25
    239c:	80 93 78 00 	sts	0x0078, r24
    23a0:	31 c0       	rjmp	.+98     	; 0x2404 <__vector_11+0x14e>
								}
							} else {
								hours1++;
    23a2:	80 91 76 00 	lds	r24, 0x0076
    23a6:	90 91 77 00 	lds	r25, 0x0077
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	90 93 77 00 	sts	0x0077, r25
    23b0:	80 93 76 00 	sts	0x0076, r24
    23b4:	27 c0       	rjmp	.+78     	; 0x2404 <__vector_11+0x14e>
							}
						} else {
							mins2++;
    23b6:	80 91 74 00 	lds	r24, 0x0074
    23ba:	90 91 75 00 	lds	r25, 0x0075
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	90 93 75 00 	sts	0x0075, r25
    23c4:	80 93 74 00 	sts	0x0074, r24
    23c8:	1d c0       	rjmp	.+58     	; 0x2404 <__vector_11+0x14e>
						}
					} else {
						mins1++;
    23ca:	80 91 72 00 	lds	r24, 0x0072
    23ce:	90 91 73 00 	lds	r25, 0x0073
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	90 93 73 00 	sts	0x0073, r25
    23d8:	80 93 72 00 	sts	0x0072, r24
    23dc:	13 c0       	rjmp	.+38     	; 0x2404 <__vector_11+0x14e>
					}
				} else {
					sec2++;
    23de:	80 91 70 00 	lds	r24, 0x0070
    23e2:	90 91 71 00 	lds	r25, 0x0071
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	90 93 71 00 	sts	0x0071, r25
    23ec:	80 93 70 00 	sts	0x0070, r24
    23f0:	09 c0       	rjmp	.+18     	; 0x2404 <__vector_11+0x14e>
				}
			} else {
				sec1++;
    23f2:	80 91 6e 00 	lds	r24, 0x006E
    23f6:	90 91 6f 00 	lds	r25, 0x006F
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	90 93 6f 00 	sts	0x006F, r25
    2400:	80 93 6e 00 	sts	0x006E, r24
			}

}
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	ff 91       	pop	r31
    240a:	ef 91       	pop	r30
    240c:	9f 91       	pop	r25
    240e:	8f 91       	pop	r24
    2410:	0f 90       	pop	r0
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	0f 90       	pop	r0
    2416:	1f 90       	pop	r1
    2418:	18 95       	reti

0000241a <__vector_7>:
ISR(TIMER1_COMPA_vect) {
    241a:	1f 92       	push	r1
    241c:	0f 92       	push	r0
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	0f 92       	push	r0
    2422:	11 24       	eor	r1, r1
    2424:	8f 93       	push	r24
    2426:	9f 93       	push	r25
    2428:	ef 93       	push	r30
    242a:	ff 93       	push	r31
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
	if (sec1 == 9) {
    2434:	80 91 6e 00 	lds	r24, 0x006E
    2438:	90 91 6f 00 	lds	r25, 0x006F
    243c:	89 30       	cpi	r24, 0x09	; 9
    243e:	91 05       	cpc	r25, r1
    2440:	09 f0       	breq	.+2      	; 0x2444 <__vector_7+0x2a>
    2442:	89 c0       	rjmp	.+274    	; 0x2556 <__vector_7+0x13c>
			sec1 = 0;
    2444:	10 92 6f 00 	sts	0x006F, r1
    2448:	10 92 6e 00 	sts	0x006E, r1
			if (sec2 == 5) {
    244c:	80 91 70 00 	lds	r24, 0x0070
    2450:	90 91 71 00 	lds	r25, 0x0071
    2454:	85 30       	cpi	r24, 0x05	; 5
    2456:	91 05       	cpc	r25, r1
    2458:	09 f0       	breq	.+2      	; 0x245c <__vector_7+0x42>
    245a:	73 c0       	rjmp	.+230    	; 0x2542 <__vector_7+0x128>
				sec2 = 0;
    245c:	10 92 71 00 	sts	0x0071, r1
    2460:	10 92 70 00 	sts	0x0070, r1
				if (mins1 == 9) {
    2464:	80 91 72 00 	lds	r24, 0x0072
    2468:	90 91 73 00 	lds	r25, 0x0073
    246c:	89 30       	cpi	r24, 0x09	; 9
    246e:	91 05       	cpc	r25, r1
    2470:	09 f0       	breq	.+2      	; 0x2474 <__vector_7+0x5a>
    2472:	5d c0       	rjmp	.+186    	; 0x252e <__vector_7+0x114>
					mins1 = 0;
    2474:	10 92 73 00 	sts	0x0073, r1
    2478:	10 92 72 00 	sts	0x0072, r1
					if (mins2 == 5) {
    247c:	80 91 74 00 	lds	r24, 0x0074
    2480:	90 91 75 00 	lds	r25, 0x0075
    2484:	85 30       	cpi	r24, 0x05	; 5
    2486:	91 05       	cpc	r25, r1
    2488:	09 f0       	breq	.+2      	; 0x248c <__vector_7+0x72>
    248a:	47 c0       	rjmp	.+142    	; 0x251a <__vector_7+0x100>
						mins2 = 0;
    248c:	10 92 75 00 	sts	0x0075, r1
    2490:	10 92 74 00 	sts	0x0074, r1
						if (hours1 == 9) {
    2494:	80 91 76 00 	lds	r24, 0x0076
    2498:	90 91 77 00 	lds	r25, 0x0077
    249c:	89 30       	cpi	r24, 0x09	; 9
    249e:	91 05       	cpc	r25, r1
    24a0:	91 f5       	brne	.+100    	; 0x2506 <__vector_7+0xec>
							hours1 = 0;
    24a2:	10 92 77 00 	sts	0x0077, r1
    24a6:	10 92 76 00 	sts	0x0076, r1
							if (hours2 == 9) {
    24aa:	80 91 78 00 	lds	r24, 0x0078
    24ae:	90 91 79 00 	lds	r25, 0x0079
    24b2:	89 30       	cpi	r24, 0x09	; 9
    24b4:	91 05       	cpc	r25, r1
    24b6:	e9 f4       	brne	.+58     	; 0x24f2 <__vector_7+0xd8>
								sec1 = 0, sec2 = 0, mins1 = 0, mins2 = 0, hours1 = 0, hours2 = 0,TCNT1=0;
    24b8:	10 92 6f 00 	sts	0x006F, r1
    24bc:	10 92 6e 00 	sts	0x006E, r1
    24c0:	10 92 71 00 	sts	0x0071, r1
    24c4:	10 92 70 00 	sts	0x0070, r1
    24c8:	10 92 73 00 	sts	0x0073, r1
    24cc:	10 92 72 00 	sts	0x0072, r1
    24d0:	10 92 75 00 	sts	0x0075, r1
    24d4:	10 92 74 00 	sts	0x0074, r1
    24d8:	10 92 77 00 	sts	0x0077, r1
    24dc:	10 92 76 00 	sts	0x0076, r1
    24e0:	10 92 79 00 	sts	0x0079, r1
    24e4:	10 92 78 00 	sts	0x0078, r1
    24e8:	ec e4       	ldi	r30, 0x4C	; 76
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	11 82       	std	Z+1, r1	; 0x01
    24ee:	10 82       	st	Z, r1
    24f0:	3b c0       	rjmp	.+118    	; 0x2568 <__vector_7+0x14e>
							} else {
								hours2++;
    24f2:	80 91 78 00 	lds	r24, 0x0078
    24f6:	90 91 79 00 	lds	r25, 0x0079
    24fa:	01 96       	adiw	r24, 0x01	; 1
    24fc:	90 93 79 00 	sts	0x0079, r25
    2500:	80 93 78 00 	sts	0x0078, r24
    2504:	31 c0       	rjmp	.+98     	; 0x2568 <__vector_7+0x14e>
							}
						} else {
							hours1++;
    2506:	80 91 76 00 	lds	r24, 0x0076
    250a:	90 91 77 00 	lds	r25, 0x0077
    250e:	01 96       	adiw	r24, 0x01	; 1
    2510:	90 93 77 00 	sts	0x0077, r25
    2514:	80 93 76 00 	sts	0x0076, r24
    2518:	27 c0       	rjmp	.+78     	; 0x2568 <__vector_7+0x14e>
						}
					} else {
						mins2++;
    251a:	80 91 74 00 	lds	r24, 0x0074
    251e:	90 91 75 00 	lds	r25, 0x0075
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	90 93 75 00 	sts	0x0075, r25
    2528:	80 93 74 00 	sts	0x0074, r24
    252c:	1d c0       	rjmp	.+58     	; 0x2568 <__vector_7+0x14e>
					}
				} else {
					mins1++;
    252e:	80 91 72 00 	lds	r24, 0x0072
    2532:	90 91 73 00 	lds	r25, 0x0073
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	90 93 73 00 	sts	0x0073, r25
    253c:	80 93 72 00 	sts	0x0072, r24
    2540:	13 c0       	rjmp	.+38     	; 0x2568 <__vector_7+0x14e>
				}
			} else {
				sec2++;
    2542:	80 91 70 00 	lds	r24, 0x0070
    2546:	90 91 71 00 	lds	r25, 0x0071
    254a:	01 96       	adiw	r24, 0x01	; 1
    254c:	90 93 71 00 	sts	0x0071, r25
    2550:	80 93 70 00 	sts	0x0070, r24
    2554:	09 c0       	rjmp	.+18     	; 0x2568 <__vector_7+0x14e>
			}
		} else {
			sec1++;
    2556:	80 91 6e 00 	lds	r24, 0x006E
    255a:	90 91 6f 00 	lds	r25, 0x006F
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	90 93 6f 00 	sts	0x006F, r25
    2564:	80 93 6e 00 	sts	0x006E, r24
		}
}
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	ff 91       	pop	r31
    256e:	ef 91       	pop	r30
    2570:	9f 91       	pop	r25
    2572:	8f 91       	pop	r24
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	0f 90       	pop	r0
    257a:	1f 90       	pop	r1
    257c:	18 95       	reti

0000257e <Timer1_init>:
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	00 d0       	rcall	.+0      	; 0x2584 <Timer1_init+0x6>
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A = (1 << FOC1A) | (Config_Ptr->mode & 3);
    258c:	af e4       	ldi	r26, 0x4F	; 79
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e9 81       	ldd	r30, Y+1	; 0x01
    2592:	fa 81       	ldd	r31, Y+2	; 0x02
    2594:	85 81       	ldd	r24, Z+5	; 0x05
    2596:	83 70       	andi	r24, 0x03	; 3
    2598:	88 60       	ori	r24, 0x08	; 8
    259a:	8c 93       	st	X, r24
	if (Config_Ptr->mode == CTC) {
    259c:	e9 81       	ldd	r30, Y+1	; 0x01
    259e:	fa 81       	ldd	r31, Y+2	; 0x02
    25a0:	85 81       	ldd	r24, Z+5	; 0x05
    25a2:	84 30       	cpi	r24, 0x04	; 4
    25a4:	81 f4       	brne	.+32     	; 0x25c6 <Timer1_init+0x48>

		TIMSK |= (1 << OCIE1A); /* Enable Timer1 Compare A Interrupt */
    25a6:	a9 e5       	ldi	r26, 0x59	; 89
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e9 e5       	ldi	r30, 0x59	; 89
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	80 61       	ori	r24, 0x10	; 16
    25b2:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;
    25b4:	aa e4       	ldi	r26, 0x4A	; 74
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ba:	fa 81       	ldd	r31, Y+2	; 0x02
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	11 96       	adiw	r26, 0x01	; 1
    25c2:	9c 93       	st	X, r25
    25c4:	8e 93       	st	-X, r24
	}
	if (Config_Ptr->mode == NORMAL) {
    25c6:	e9 81       	ldd	r30, Y+1	; 0x01
    25c8:	fa 81       	ldd	r31, Y+2	; 0x02
    25ca:	85 81       	ldd	r24, Z+5	; 0x05
    25cc:	88 23       	and	r24, r24
    25ce:	39 f4       	brne	.+14     	; 0x25de <Timer1_init+0x60>
		TIMSK |= (1 << TOIE0); // Enable Timer0 Overflow Interrupt
    25d0:	a9 e5       	ldi	r26, 0x59	; 89
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e9 e5       	ldi	r30, 0x59	; 89
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	81 60       	ori	r24, 0x01	; 1
    25dc:	8c 93       	st	X, r24
	}
	TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode >> 2) << 3);
    25de:	ae e4       	ldi	r26, 0x4E	; 78
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e9 81       	ldd	r30, Y+1	; 0x01
    25e4:	fa 81       	ldd	r31, Y+2	; 0x02
    25e6:	84 81       	ldd	r24, Z+4	; 0x04
    25e8:	28 2f       	mov	r18, r24
    25ea:	e9 81       	ldd	r30, Y+1	; 0x01
    25ec:	fa 81       	ldd	r31, Y+2	; 0x02
    25ee:	85 81       	ldd	r24, Z+5	; 0x05
    25f0:	86 95       	lsr	r24
    25f2:	86 95       	lsr	r24
    25f4:	88 2f       	mov	r24, r24
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	88 0f       	add	r24, r24
    2602:	99 1f       	adc	r25, r25
    2604:	82 2b       	or	r24, r18
    2606:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
    2608:	ac e4       	ldi	r26, 0x4C	; 76
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e9 81       	ldd	r30, Y+1	; 0x01
    260e:	fa 81       	ldd	r31, Y+2	; 0x02
    2610:	80 81       	ld	r24, Z
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	11 96       	adiw	r26, 0x01	; 1
    2616:	9c 93       	st	X, r25
    2618:	8e 93       	st	-X, r24

}
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <Timer1_deInit>:

void Timer1_deInit(void)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    262c:	ef e4       	ldi	r30, 0x4F	; 79
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	10 82       	st	Z, r1
	TCCR1B=0;
    2632:	ee e4       	ldi	r30, 0x4E	; 78
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	10 82       	st	Z, r1

}
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <Timer1_setCallBack+0x6>
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	90 93 7b 00 	sts	0x007B, r25
    2654:	80 93 7a 00 	sts	0x007A, r24

}
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <__prologue_saves__>:
    2662:	2f 92       	push	r2
    2664:	3f 92       	push	r3
    2666:	4f 92       	push	r4
    2668:	5f 92       	push	r5
    266a:	6f 92       	push	r6
    266c:	7f 92       	push	r7
    266e:	8f 92       	push	r8
    2670:	9f 92       	push	r9
    2672:	af 92       	push	r10
    2674:	bf 92       	push	r11
    2676:	cf 92       	push	r12
    2678:	df 92       	push	r13
    267a:	ef 92       	push	r14
    267c:	ff 92       	push	r15
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	ca 1b       	sub	r28, r26
    268c:	db 0b       	sbc	r29, r27
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	09 94       	ijmp

0000269a <__epilogue_restores__>:
    269a:	2a 88       	ldd	r2, Y+18	; 0x12
    269c:	39 88       	ldd	r3, Y+17	; 0x11
    269e:	48 88       	ldd	r4, Y+16	; 0x10
    26a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    26a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    26a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    26a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    26a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    26aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    26ac:	b9 84       	ldd	r11, Y+9	; 0x09
    26ae:	c8 84       	ldd	r12, Y+8	; 0x08
    26b0:	df 80       	ldd	r13, Y+7	; 0x07
    26b2:	ee 80       	ldd	r14, Y+6	; 0x06
    26b4:	fd 80       	ldd	r15, Y+5	; 0x05
    26b6:	0c 81       	ldd	r16, Y+4	; 0x04
    26b8:	1b 81       	ldd	r17, Y+3	; 0x03
    26ba:	aa 81       	ldd	r26, Y+2	; 0x02
    26bc:	b9 81       	ldd	r27, Y+1	; 0x01
    26be:	ce 0f       	add	r28, r30
    26c0:	d1 1d       	adc	r29, r1
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	ed 01       	movw	r28, r26
    26ce:	08 95       	ret

000026d0 <_exit>:
    26d0:	f8 94       	cli

000026d2 <__stop_program>:
    26d2:	ff cf       	rjmp	.-2      	; 0x26d2 <__stop_program>
